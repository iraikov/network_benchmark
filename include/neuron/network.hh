/*     ###########     Exact simulation of integrate-and-fire models with synaptic conductances ######################

This code is associated with the paper :
"Brette Romain (2006) , Exact simulation of integrate-and-fire models with synaptic conductances" :
http://www.di.ens.fr/~brette/papers/Brette2005NC.htm
*************************
*************************
*************************
Cohen Benjamin
benjamin.cohen _AT_ ens-lyon.fr
Last updated : Jul 2006 

If you modify the source file, please don't delete this header
***********************************************************************************************************

Modified by: Ivan Raikov <iraikov@stanford.edu>
Last updated : August 2019

*/


#include <vector>
#include <memory>
#include <functional>
#include <queue>
#include <random>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

#include "neuron.hh"

namespace neuron
{

  typedef unsigned int distance_t ;
  
  /*! Point neuron coordinates */
  struct Coords
  {
    Coords(int phi);
    ~Coords();
    
    int phi;
  };
  
  /*! Event-based simulation of a recurrent neural network with integrate-and-fire units. */  
  struct Network
  {
    /** 
     * Network constructor.
     * 
     * @param tstop duration of simulation, ms 
     * @param seed random number generator seed
     * 
     * @return 
     */
    Network(double tstop, int seed, std::vector < std::vector <double> > input_vector);
    ~Network();

    /** 
     * Start the simulation loop and run until tstop is reached.
     * 
     */
    void start();

    /** 
     * Perform one simulation step (i.e. process one spike event).
     * 
     * 
     * @return 
     */
    int step();	// One simulation step

    std::queue<Spike> outputs; /**< Spikes generated by the neurons in the network */

    
    double t;                   /**< Current simulation time */
    double tstop;               /**< End of simulation time */
    double t_DA;                /**< DA update time */

    int nb_neurons;	/**< number of neurons in the network */
    size_t num_synapses; /**< number of synapses in the network */
    size_t num_input_synapses; /**< number of input synapses in the network */
    size_t num_output_synapses; /**< number of output synapses in the network */
    
    std::vector<shared_ptr<SpikeSource>> pop_vec; /**< Vector of neurons in the network */
    std::vector< Coords > coords;  /**< Vector of neuron coordinates */

    std::shared_ptr<Ncq> q;  /**< priority queue with pending spike times */
    std::shared_ptr<double> DA; /**< global level of dopamine */
    std::priority_queue<double, std::vector<double>, std::greater<double>> reward; /**< priority queue with pending reward times */

  };

  
  /*! Connection generator for recurrent neural network. */  
  struct ConnectionGenerator
  {
    /** 
     * Network constructor.
     * 
     * @param tstop duration of simulation, ms 
     * @param seed random number generator seed
     * 
     * @return 
     */
    ConnectionGenerator(int seed, size_t coords_extent,
                        
                        std::vector<shared_ptr<SpikeSource>>& pop_vec,
                        std::vector< Coords >& coords,

                        distance_t exc_connection_distance,
                        distance_t inh_connection_distance,
                        
                        int offset_inhibitory,
                        int start_inhibitory,
    
                        int offset_excitatory,
                        int start_excitatory,

                        int offset_neurons,
                        int start_neurons,
    
                        int offset_outputs,
                        int start_outputs,
                        
                        int offset_inputs,
                        int start_inputs);
                        

    ~ConnectionGenerator();

    /** 
     * Instantiate skew normal ring architecture.
     * 
     */
    void skewnormal_ring(size_t& num_synapses, size_t& num_input_synapses, size_t& num_output_synapses);

    void get_norm_probdist(const std::vector< std::pair<int,distance_t> >& neighbors,
                           distance_t connection_distance,
                           std::vector< std::pair<int,double> >& neighbors_probdist);
    
    void get_skewnorm_probdist(const std::vector< std::pair<int,distance_t> >& neighbors,
                               distance_t connection_distance, double a,
                               std::vector< std::pair<int,double> >& neighbors_probdist);
    
    void get_neighbors(int loc, int start, int offset, distance_t connection_distance, std::vector <std::pair<int,distance_t> >& neighbors);
    void choose_connections(std::default_random_engine& rand,
                            const std::vector< std::pair<int,double> >& neighbors_probdist,
                            size_t num_synapses,
                            std::vector <int>& selected_neighbors);
    

    int seed;
    size_t coords_extent;

    std::vector<shared_ptr<SpikeSource>>& pop_vec; /**< Vector of neurons in the network */
    std::vector< Coords >& coords;
    
    distance_t exc_connection_distance;
    distance_t inh_connection_distance;

    int offset_inhibitory;
    int start_inhibitory;
    
    int offset_excitatory;
    int start_excitatory;

    int offset_neurons;
    int start_neurons;
    
    int offset_outputs;
    int start_outputs;

    int offset_inputs;
    int start_inputs;

  };


}
